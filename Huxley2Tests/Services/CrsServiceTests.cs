// © James Singleton. EUPL-1.2 (see the LICENSE file for the full license governing this code).

using FakeItEasy;
using Huxley2.Services;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using OpenLDBSVWS;
using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Xunit;

namespace Huxley2Tests.Services
{
    public class CrsServiceTests
    {
        [Fact]
        public async Task CrsServiceLoadsCrsCodesFromCsvDownloadWhenNoStaffTokenConfigured()
        {
            var config = A.Fake<IConfiguration>();
            config["StationCodesCsvUrl"] = "http://example.com";
            var service = GetServiceWithHttpClient(config);

            await service.LoadCrsCodes();

            Assert.Equal(18, service.GetLondonTerminals().Count());
            Assert.Equal(2570, service.GetStations(null).Count());
        }

        [Fact]
        public async Task CrsServiceLoadsCrsCodesFromCsvDownloadWhenStaffCallFails()
        {
            var config = A.Fake<IConfiguration>();
            config["StationCodesCsvUrl"] = "http://example.com";
            config["DarwinStaffAccessToken"] = Guid.NewGuid().ToString();
            var service = GetServiceWithHttpClient(config);

            await service.LoadCrsCodes();

            Assert.Equal(18, service.GetLondonTerminals().Count());
            Assert.Equal(2570, service.GetStations(null).Count());
        }

        [SuppressMessage("Reliability", "CA2000:Dispose objects before losing scope",
            Justification = "Tests will fail and DI handles client life-cycle elsewhere")]
        private CrsService GetServiceWithHttpClient(IConfiguration config)
        {
            var handler = A.Fake<FakeHttpMessageHandler>(f => f.CallsBaseMethods());
            var stream = new MemoryStream(Convert.FromBase64String(CSV_STREAM));
            var content = new StreamContent(stream);
            var response = new HttpResponseMessage
            {
                StatusCode = HttpStatusCode.OK,
                Content = content,
            };
            var client = new HttpClient(handler);
            A.CallTo(() => handler.Send(A<HttpRequestMessage>._)).Returns(response);
            return new CrsService(
                A.Fake<ILogger<CrsService>>(),
                config,
                new AccessTokenService(A.Fake<ILogger<AccessTokenService>>(), config),
                A.Fake<LDBSVRefServiceSoap>(),
                client);
        }

        private const string CSV_STREAM = "";
    }
}
